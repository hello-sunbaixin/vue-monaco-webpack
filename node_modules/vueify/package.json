{
  "_args": [
    [
      {
        "raw": "vueify@^9.4.0",
        "scope": null,
        "escapedName": "vueify",
        "name": "vueify",
        "rawSpec": "^9.4.0",
        "spec": ">=9.4.0 <10.0.0",
        "type": "range"
      },
      "/Users/sunbaixin/baidu/monaco-editor/vue-monaco-webpack"
    ]
  ],
  "_from": "vueify@>=9.4.0 <10.0.0",
  "_id": "vueify@9.4.1",
  "_inCache": true,
  "_location": "/vueify",
  "_nodeVersion": "7.4.0",
  "_npmOperationalInternal": {
    "host": "packages-18-east.internal.npmjs.com",
    "tmp": "tmp/vueify-9.4.1.tgz_1489027380598_0.15753661398775876"
  },
  "_npmUser": {
    "name": "yyx990803",
    "email": "yyx990803@gmail.com"
  },
  "_npmVersion": "4.0.5",
  "_phantomChildren": {},
  "_requested": {
    "raw": "vueify@^9.4.0",
    "scope": null,
    "escapedName": "vueify",
    "name": "vueify",
    "rawSpec": "^9.4.0",
    "spec": ">=9.4.0 <10.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "#DEV:/"
  ],
  "_resolved": "https://registry.npmjs.org/vueify/-/vueify-9.4.1.tgz",
  "_shasum": "d29a9775a33c4b8a8601e186a85da2ab800ca0d6",
  "_shrinkwrap": null,
  "_spec": "vueify@^9.4.0",
  "_where": "/Users/sunbaixin/baidu/monaco-editor/vue-monaco-webpack",
  "author": {
    "name": "Evan You"
  },
  "bugs": {
    "url": "https://github.com/vuejs/vueify/issues"
  },
  "dependencies": {
    "chalk": "^1.1.1",
    "convert-source-map": "^1.2.0",
    "cssnano": "^3.3.2",
    "hash-sum": "^1.0.2",
    "json5": "^0.5.1",
    "lru-cache": "^4.0.0",
    "object-assign": "^4.0.1",
    "postcss": "^5.0.10",
    "postcss-selector-parser": "^2.0.0",
    "source-map": "^0.5.6",
    "through": "^2.3.6",
    "vue-hot-reload-api": "^2.0.1",
    "vue-template-compiler": "^2.0.0-alpha.8",
    "vue-template-es2015-compiler": "^1.2.2"
  },
  "description": "Vue component transform for Browserify",
  "devDependencies": {
    "babel-core": "^6.0.0",
    "babel-plugin-transform-runtime": "^6.0.0",
    "babel-preset-es2015": "^6.0.0",
    "babel-runtime": "^6.0.0",
    "browserify": "^13.0.1",
    "chai": "^3.5.0",
    "coffee-script": "^1.10.0",
    "eslint": "^2.13.0",
    "eslint-config-vue": "^1.0.3",
    "eslint-plugin-html": "^1.5.3",
    "jade": "^1.11.0",
    "jsdom": "^9.2.1",
    "less": "^2.5.1",
    "mkdirp": "^0.5.1",
    "mocha": "^2.3.3",
    "node-sass": "^3.3.3",
    "pug": "^2.0.0-alpha6",
    "rimraf": "^2.5.2",
    "stylus": "^0.52.4"
  },
  "directories": {},
  "dist": {
    "shasum": "d29a9775a33c4b8a8601e186a85da2ab800ca0d6",
    "tarball": "https://registry.npmjs.org/vueify/-/vueify-9.4.1.tgz"
  },
  "gitHead": "8d3159ff7d41bfaf1662056436a4252ea07219aa",
  "homepage": "https://github.com/vuejs/vueify",
  "keywords": [
    "vue",
    "browserify"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "yyx990803",
      "email": "yyx990803@gmail.com"
    }
  ],
  "name": "vueify",
  "optionalDependencies": {},
  "readme": "# vueify [![Build Status](https://circleci.com/gh/vuejs/vueify.svg?style=shield)](https://circleci.com/gh/vuejs/vueify) [![npm version](https://badge.fury.io/js/vueify.svg)](http://badge.fury.io/js/vueify)\n\n> [Browserify](http://browserify.org/) transform for [Vue.js](http://vuejs.org/) components, with scoped CSS and component hot-reloading.\n\n**NOTE: master branch now hosts version ^9.0, which only works with Vue ^2.0. Vueify 8.x which works with Vue 1.x is in the [8.x branch](https://github.com/vuejs/vueify/tree/8.x).**\n\nThis transform allows you to write your components in this format:\n\n``` html\n// app.vue\n<style>\n  .red {\n    color: #f00;\n  }\n</style>\n\n<template>\n  <h1 class=\"red\">{{msg}}</h1>\n</template>\n\n<script>\nexport default {\n  data () {\n    return {\n      msg: 'Hello world!'\n    }\n  }\n}\n</script>\n```\n\nYou can also mix preprocessor languages in the component file:\n\n``` vue\n// app.vue\n<style lang=\"stylus\">\n.red\n  color #f00\n</style>\n\n<template lang=\"jade\">\nh1(class=\"red\") {{msg}}\n</template>\n\n<script lang=\"coffee\">\nmodule.exports =\n  data: ->\n    msg: 'Hello world!'\n</script>\n```\n\nAnd you can import using the `src` attribute:\n\n``` html\n<style lang=\"stylus\" src=\"style.styl\"></style>\n```\n\nUnder the hood, the transform will:\n\n- extract the styles, compile them and insert them with the `insert-css` module.\n- extract the template, compile it and add it to your exported options.\n\nYou can `require()` other stuff in the `<script>` as usual. ~~Note that for CSS-preprocessor @imports, the path should be relative to your project root directory.~~ Starting in 7.0.0, `@import` in LESS, SASS and Stylus files can be either relative to your build tool root working directory, or to the file being edited. Or one can set import paths in options.\n\n## Usage\n\n``` bash\nnpm install vueify --save-dev\nbrowserify -t vueify -e src/main.js -o build/build.js\n```\n\nAnd this is all you need to do in your main entry file:\n\n``` js\n// main.js\nvar Vue = require('vue')\nvar App = require('./app.vue')\n\nnew Vue({\n  el: '#app',\n  render: function (createElement) {\n    return createElement(App)\n  }\n})\n```\n\nIn your HTML:\n\n``` html\n<body>\n  <div id=\"app\"></div>\n  <script src=\"build.js\"></script>\n</body>\n```\n\nIf you are using `vueify` in Node:\n\n``` js\nvar fs = require(\"fs\")\nvar browserify = require('browserify')\nvar vueify = require('vueify')\n\nbrowserify('./main.js')\n  .transform(vueify)\n  .bundle()\n  .pipe(fs.createWriteStream(\"bundle.js\"))\n```\n\n## Building for Production\n\nMake sure to have the `NODE_ENV` environment variable set to `\"production\"` when building for production! This strips away unnecessary code (e.g. hot-reload) for smaller bundle size.\n\nIf you are using Gulp, note that `gulp --production` **does not** affect vueify; you still need to explicitly set `NODE_ENV=production`.\n\n## ES2015 with Babel\n\nVueify is pre-configured to work with Babel. Simply install Babel-related dependencies:\n\n``` bash\nnpm install\\\n  babel-core\\\n  babel-preset-es2015\\\n  --save-dev\n```\n\nThen create a `.babelrc`:\n\n``` json\n{\n  \"presets\": [\"es2015\"]\n}\n```\n\nAnd voila! You can now write ES2015 in your `*.vue` files. Note if you want to use ES2015 on normal `*.js` files, you will also need [babelify](https://github.com/babel/babelify).\n\nYou can also configure babel with the `babel` field in `vue.config.js`, which will take the highest priority.\n\n## Enabling Other Pre-Processors\n\nFor other pre-processors, you also need to install the corresponding node modules to enable the compilation. e.g. to get stylus compiled in your Vue components, do `npm install stylus --save-dev`.\n\nThese are the preprocessors supported by vueify out of the box:\n\n- stylus\n- less\n- scss (via `node-sass`, use `sass` in [config section](#configuring-options))\n- jade\n- pug\n- coffee-script (use `coffee` in [config section](#configuring-options))\n\n## PostCSS\n\nVueify uses PostCSS for scoped CSS rewrite. You can also provide your own PostCSS plugins! See [config section](#configuring-options) below for an example.\n\n## Configuring Options\n\nCreate a `vue.config.js` file at where your build command is run (usually the root level of your project):\n\n``` js\nmodule.exports = {\n  // configure a built-in compiler\n  sass: {\n    includePaths: [...]\n  },\n  // provide your own postcss plugins\n  postcss: [...],\n  // register custom compilers\n  customCompilers: {\n    // for tags with lang=\"ts\"\n    ts: function (content, cb, compiler, filePath) {\n      // content:  content extracted from lang=\"ts\" blocks\n      // cb:       the callback to call when you're done compiling\n      // compiler: the vueify compiler instance\n      // filePath: the path for the file being compiled\n      //\n      // compile some TypeScript... and when you're done:\n      cb(null, result)\n    }\n  }\n}\n```\n\nExample using custom PostCSS plugin:\n\n``` js\nvar cssnext = require('cssnext')\n\nmodule.exports = {\n  postcss: [cssnext()]\n}\n```\n\nAlternatively, if you are using `vueify` in Node and don't want to create a `vue.config.js` file:\n\n``` js\nvar fs = require(\"fs\")\nvar browserify = require('browserify')\nvar vueify = require('vueify')\n\n// apply custom config\nvueify.compiler.applyConfig({\n  // ...same as in vue.config.js\n})\n\nbrowserify('./main.js')\n  .transform(vueify)\n  .bundle()\n  .pipe(fs.createWriteStream(\"bundle.js\"))\n```\n\nOr simply pass configuration object to `vueify` (in Node) (for instance to set sass search paths as in the following example):\n\n``` js\nvar fs = require(\"fs\")\nvar browserify = require('browserify')\nvar vueify = require('vueify')\n\nbrowserify('./main.js')\n  .transform(vueify, {\n    sass: {\n      includePaths: [...]\n    },\n    // ...same as in vue.config.js\n  })\n  .bundle()\n  .pipe(fs.createWriteStream(\"bundle.js\"))\n```\n\n## Scoped CSS\n\nWhen a `<style>` tag has the `scoped` attribute, its CSS will apply to elements of the current component only. This is similar to the style encapsulation found in Shadow DOM, but doesn't require any polyfills. It is achieved by transforming the following:\n\n``` html\n<style scoped>\n.example {\n  color: red;\n}\n</style>\n<template>\n  <div class=\"example\">hi</div>\n</template>\n```\n\nInto the following:\n\n``` html\n<style>\n.example[_v-1] {\n  color: red;\n}\n</style>\n<template>\n  <div class=\"example\" _v-1>hi</div>\n</template>\n```\n\n### Scoped CSS Notes\n\n1. You can include both scoped and non-scoped styles in the same component.\n\n2. The following will be affected by both the parent's scoped CSS and the child's scoped CSS:\n  - A child component's root node\n  - Content inserted to a child component via `<slot>`\n\n## Hot Reload\n\nTo enable hot component reloading, you need to install the [browserify-hmr](https://github.com/AgentME/browserify-hmr) plugin:\n\n``` bash\nnpm install browserify-hmr --save-dev\nwatchify -p browserify-hmr index.js -o bundle.js\n```\n\nYou can scaffold a hot-reload enabled project easily using `vue-cli` and the [this template](https://github.com/vuejs-templates/browserify-simple).\n\n## CSS Extraction\n\nBy default, the CSS in each component is injected into the page using a `<style>` tag. This works well in most scenarios and enables CSS hot-reloading during development. However, in some cases you may prefer extracting all component CSS into a single file for better performance. To do that, you will need to add the CSS extraction browserify plugin.\n\nVia CLI:\n\n``` bash\nbrowserify -t vueify -p [ vueify/plugins/extract-css -o dist/bundle.css ] main.js\n```\n\nVia API:\n\n``` js\nbrowserify('./main.js')\n  .transform('vueify')\n  .plugin('vueify/plugins/extract-css', {\n    out: 'dist/bundle.css' // can also be a WritableStream\n  })\n  .bundle()\n```\n\nThis only works for vueify 9+. For Vue 1.x / vueify 8.x you can use [vueify-extract-css](https://github.com/rawcreative/vueify-extract-css).\n\n## Building for Production\n\nWhen building for production, follow these steps to ensure smaller bundle size:\n\n1. Make sure `process.env.NODE_ENV === \"production\"`. This tells `vueify` to avoid including hot-reload related code.\n\n2. Apply a global [envify](https://github.com/hughsk/envify) transform to your bundle. This allows the minifier to strip out all the warnings in Vue's source code wrapped in env variable conditional blocks.\n\n## Compiler API\n\nThe compiler API (originally `vue-component-compiler`) is also exposed:\n\n``` js\nvar compiler = require('vueify').compiler\n\n// filePath should be an absolute path\ncompiler.compile(fileContent, filePath, function (err, result) {\n  // result is a common js module string\n})\n```\n\n## Syntax Highlighting\n\nCurrently there are syntax highlighting support for [Sublime Text](https://github.com/vuejs/vue-syntax-highlight), [Atom](https://atom.io/packages/language-vue), [Vim](https://github.com/posva/vim-vue), [Visual Studio Code](https://marketplace.visualstudio.com/items/liuji-jim.vue) and [Brackets](https://github.com/pandao/brackets-vue). Contributions for other editors/IDEs are highly appreciated! If you are not using any pre-processors in Vue components, you can also get by by treating `*.vue` files as HTML in your editor.\n\n## Changelog\n\nPlease see the [Releases](https://github.com/vuejs/vueify/releases) page for changes in versions ^9.0.0.\n\n## License\n\n[MIT](http://opensource.org/licenses/MIT)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/vuejs/vueify.git"
  },
  "scripts": {
    "test": "eslint index.js lib && mocha test/test.js --slow=5000 --timeout=10000"
  },
  "version": "9.4.1"
}
